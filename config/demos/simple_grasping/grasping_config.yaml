## NOTE: not all parameters below are required - the Simulation class and all Object classes have many default parameters

name: "Simple Grasping"  # name of the simulation
description: "Interactive grasping of mesh nodes inside a user-controlled grasping radius" # description of the simulation

visualization: "Easy3D" # what graphics to use ('Easy3D' for Easy3D graphics or 'None' for no graphics)

g-accel: 0 # downward acceleration due to gravity (in the z-direction) [m/s2]

## different simulation "modes"
# sim-mode: "Frame-by-frame"  # "Frame-by-frame" lets you advance the simulation one frame at a time by pressing any key
# sim-mode: "Visualization"     # "Visualization" runs the simulation at 'real-time' such that sim time = wall clock time
sim-mode: "AFAP"            # "AFAP" runs the simulation As Fast As Possible, without caring if sim time is going faster than wall clock time

enable-mouse-interaction: true  # enables/disables mouse interaction in the viewer (LMB + drag to change view, scroll to zoom, etc.)
input-device: "Mouse" 

time-step: 5e-4   # simulation time step [s]
collision-rate: 1000 # rate at which to run collision detection [Hz] 
fps: 30 # frames per second of the visualization (i.e. how often to redraw graphics)
end-time: 10000 # end time of the simulation [s]

## define elastic material
materials:
  -
    name: "Soft Tissue"
    density: 1000   # density [kg/m^3]
    E: 6e4    # Young's modulus [Pa]
    nu: 0.45  # Poisson's ratio [-]
    mu-s: 0.0 # coefficient of static friction [-]
    mu-k: 0.0 # coefficient of kinetic friction [-]

## GraspingSimulation-specific parameters
grasp-radius: 0.1 # initial grasp radius [m] - LARGER for better mouse sensitivity
fix-min-z: true   # whether or not to fix all vertices that have the mesh's minimum z-coordinate (i.e. fixes the bottom face of the mesh)


## objects in the simulation
objects:

  ## example deformable object
  -
    name: "Cube1"

    ## type of object
    type: "FirstOrderXPBDMeshObject"  # use the 1st-order XPBD method
    # type: "XPBDMeshObject"          # use the standard, 2nd-order XPBD method

    ## filename to load from (.msh is GMSH's volumetric mesh format, but if .obj or .stl is provided, will automatically turn surface mesh to volume mesh)
    # filename: "../resource/general/stanford_bunny_lowpoly.msh"
    # filename: "../resource/cube/cube8.msh"
    # filename: "../resource/general/single.msh"
    # filename: "../resource/cube/cube8.msh"
    # filename: "../resource/cube/cube16.msh"
    # filename: "../resource/cube/cube32.msh"
    # filename: "../resource/tissue/Prostate.msh"
    # filename: "../resource/tissue/Trachea_processed.stl"
    # filename: "../resource/tissue/tracheal_tumor.msh"
    filename: "../resource/tissue/neuroma_segmentation_decimated_2000.obj"


    materials: ["Soft Tissue"]

    ## visualization options
    color: [1.0, 0.5, 0.0, 1.0] # uniform color of the mesh
    draw-points: false  # draw mesh points
    draw-edges: true    # draw mesh edges
    draw-faces: true    # draw mesh faces

    ## initial configuration
    max-size: 1   # size of largest model dimension (preserves aspect ratio)
    # size: [1, 1, 1]   # specify size of each dimension
    position: [0, 0, 1.2]   # initial position of mesh center of mass [m]
    velocity: [0, 0, 0.0]   # initial velocity [m/s] (applied to all vertices in the deformable mesh)
    rotation: [0, 0, 0]     # initial rotation [deg] (specified as XYZ Euler angles)

    ## collisions
    collisions: true

    ## XPBD-specific options
    num-solver-iters: 5   # number of solver loop iterations per time step 
    
    solver-type: "Gauss-Seidel"   # use Gauss-Seidel solver (i.e. update mesh after every constraint projection)
    # solver-type: "Jacobi"       # use Jacobi solver (i.e. update mesh only after going through every constraint projection)
    # solver-type: "Parallel-Jacobi"  # use parallelized Jacobi solver (note: unstable and requires GPU)

    constraint-type: "Stable-Neohookean-Combined"   # use Stable Neohookean constraints with 2x2 block constraint solve for each tet element
    # constraint-type: "Stable-Neohookean"          # use Stable Neohookean constraints with separate constraint solve for each tet element

    # residual-policy: "Every-Substep"    # compute the residuals after every time step
    residual-policy: "Never"              # don't compute the residuals

    ## 1st-Order XPBD options (has no effect on XPBDMeshObject)
    damping-multiplier: 500000   # 'b' from the 1st-Order XPBD paper
  

  ## examples of other possible objects to add to the simulation

  ## rigid box
  # - 
  #   name: "ramp"
  #   type: "RigidBox"
  #   size: [5, 1, 0.2]
  #   density: 100000
  #   position: [0, 0, 0]
  #   rotation: [0, 0, 0]
  #   velocity: [0, 0, 0]
  #   angular-velocity: [0, 0, 0]
  #   fixed: true
  #   collisions: true


  ## rigid sphere
  # -
  #   name: "sphere"
  #   type: "RigidSphere"
  #   radius: 0.5
  #   density: 10000
  #   position: [0, 0, 0]
  #   velocity: [0, 0, 0]
  #   fixed: true
  #   collisions: true


  ## rigid cylinder
  # - name: "cylinder"
  #   type: "RigidCylinder"
  #   radius: 0.05
  #   height: 0.1
  #   density: 10000000
  #   position: [0, 0.2, 0.0]
  #   rotation: [100, 0, 0]
  #   velocity: [0, 0.1, 0]
  #   angular-velocity: [0, 0, 0]
  #   fixed: true
  #   collisions: true

  ## rigid mesh
  # - 
  #   name: "mesh_obj"
  #   type: "RigidMeshObject"
  #   filename: "../resource/general/stanford_bunny_lowpoly.stl"
  #   # filename: "../resource/cube/cube.obj"
  #   # sdf-filename: "../resource/sdf/stanford_bunny_lowpoly96.sdf"
  #   density: 100
  #   position: [0, 0, -2]
  #   rotation: [0, 27, 85]
  #   velocity: [0, 0, 0]
  #   angular-velocity: [0, 0, 0]
  #   max-size: 1
  #   collisions: true
  #   fixed: true


